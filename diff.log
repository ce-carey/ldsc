12,13c12,13
< from ldscore import sumstats
< from ldsc import MASTHEAD, Logger, sec_to_str
---
> from helpers import sumstats
> from helpers.ldsc import MASTHEAD, Logger, sec_to_str
131a132
> numeric_cols = ['P', 'N', 'N_CAS', 'N_CON', 'Z', 'OR', 'BETA', 'LOG_ODDS', 'INFO', 'FRQ', 'WEIGHT', 'NSTUDY']
253a255,259
> 
>         wrong_types = [c for c in dat.columns if c in numeric_cols and not np.issubdtype(dat[c].dtype, np.number)]
>         if len(wrong_types) > 0:
>             raise ValueError('Columns {} are expected to be numeric'.format(wrong_types))
> 
556c562
<             header += './munge_sumstats_CC.py \\\n'
---
>             header += './process_sumstats.py \\\n'
714,715c720,721
< 	        print "converting ORs"
< 	    	dat.WEIGHT = dat.WEIGHT.apply(np.log)
---
> 		print "converting ORs"
> 		dat.WEIGHT = dat.WEIGHT.apply(np.log)
717,719d722
<             #dat.drop('SIGNED_SUMSTAT', inplace=True, axis=1)
<         # do this last so we don't have to worry about NA values in the rest of
<         # the program
721c724,727
< 	#dat['CHR'] = np.where(len(dat.CHR) > 1, dat.CHR, 'chr' + str(dat.CHR))
---
>         # preface chromosome number with "chr," as required by LDpred
>         # second part of if-statement is hacky and meant to deal with mixed columns (ex: 1,2,3,...,22,X)
> 	if ~((dat.CHR.dtype.name == "object") & (len(set(map(type,dat["CHR"]))) == 1)):
>             dat.CHR = 'chr' + dat.CHR.astype(str)
723,724c729,730
< 	if dat.CHR.dtype.name != "object":
< 	    dat.CHR = 'chr' + dat.CHR.astype(str)
---
> 	# make sure BP is int, not float
> 	dat.BP = dat.BP.astype(int)
725a732,733
>         # do this last so we don't have to worry about NA values in the rest of
>         # the program
739d746
<             #os.system('gzip -f {F}'.format(F=out_fname))
